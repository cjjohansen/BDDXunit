<?xml version="1.0" encoding="utf-8"?>
<assemblies timestamp="10/27/2018 20:28:43">
  <assembly name="xBehave.Tests.dll" environment="64-bit .NET Standard [collection-per-class, parallel (8 threads)]" test-framework="xUnit.net 2.3.0.3820" run-date="2018-10-27" run-time="20:28:42" total="39" passed="39" failed="0" skipped="0" time="0.329" errors="0">
    <errors />
    <collection total="39" passed="39" failed="0" skipped="0" name="Test collection for Scheduling.Domain.Specs.ShiftFeatures" time="0.030">
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 1, date: Saturday, 11 March 2017) [01] (Background) Given employee is member of department" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0039098" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 1, date: Saturday, 11 March 2017) [02] (Background) And employee is manager" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000754" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 1, date: Saturday, 11 March 2017) [03] Given shiftId is 1" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0001178" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 1, date: Saturday, 11 March 2017) [04] And date is Saturday, 11 March 2017" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0001277" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 1, date: Saturday, 11 March 2017) [05] When creating a shift with shiftId and date" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0005251" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 1, date: Saturday, 11 March 2017) [06] Then the shift should have Id equal to 1 " type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0077905" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 1, date: Saturday, 11 March 2017) [07] And the shift should have OpeningDate equal to Saturday, 11 March 2017" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0018804" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 2, date: Sunday, 12 March 2017) [01] (Background) Given employee is member of department" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000011" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 2, date: Sunday, 12 March 2017) [02] (Background) And employee is manager" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000007" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 2, date: Sunday, 12 March 2017) [03] Given shiftId is 2" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000006" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 2, date: Sunday, 12 March 2017) [04] And date is Sunday, 12 March 2017" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000066" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 2, date: Sunday, 12 March 2017) [05] When creating a shift with shiftId and date" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000022" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 2, date: Sunday, 12 March 2017) [06] Then the shift should have Id equal to 2 " type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000086" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 2, date: Sunday, 12 March 2017) [07] And the shift should have OpeningDate equal to Sunday, 12 March 2017" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000076" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 3, date: Monday, 13 March 2017) [01] (Background) Given employee is member of department" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000002" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 3, date: Monday, 13 March 2017) [02] (Background) And employee is manager" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000002" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 3, date: Monday, 13 March 2017) [03] Given shiftId is 3" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000001" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 3, date: Monday, 13 March 2017) [04] And date is Monday, 13 March 2017" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000001" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 3, date: Monday, 13 March 2017) [05] When creating a shift with shiftId and date" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000005" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 3, date: Monday, 13 March 2017) [06] Then the shift should have Id equal to 3 " type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000016" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.creating_a_shift(shiftId: 3, date: Monday, 13 March 2017) [07] And the shift should have OpeningDate equal to Monday, 13 March 2017" type="Scheduling.Domain.Specs.ShiftFeatures" method="creating_a_shift" time="0.0000006" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Saturday, 11 March 2017, aShift: Shift { Id = 1, IsApproved = False, OpeningDate = Saturday, 11 March 2017, RaisedEvents = [] }) [01] (Background) Given employee is member of department" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000008" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Saturday, 11 March 2017, aShift: Shift { Id = 1, IsApproved = False, OpeningDate = Saturday, 11 March 2017, RaisedEvents = [] }) [02] (Background) And employee is manager" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000003" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Saturday, 11 March 2017, aShift: Shift { Id = 1, IsApproved = False, OpeningDate = Saturday, 11 March 2017, RaisedEvents = [] }) [03] Given an unapproved shift" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0007317" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Saturday, 11 March 2017, aShift: Shift { Id = 1, IsApproved = False, OpeningDate = Saturday, 11 March 2017, RaisedEvents = [] }) [04] When approving the shift" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.000581" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Saturday, 11 March 2017, aShift: Shift { Id = 1, IsApproved = False, OpeningDate = Saturday, 11 March 2017, RaisedEvents = [] }) [05] Then the shift should be approved" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0006167" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Saturday, 11 March 2017, aShift: Shift { Id = 1, IsApproved = False, OpeningDate = Saturday, 11 March 2017, RaisedEvents = [] }) [06] And a ShiftApproved event should be raised" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0042301" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Sunday, 12 March 2017, aShift: Shift { Id = 2, IsApproved = False, OpeningDate = Sunday, 12 March 2017, RaisedEvents = [] }) [01] (Background) Given employee is member of department" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000008" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Sunday, 12 March 2017, aShift: Shift { Id = 2, IsApproved = False, OpeningDate = Sunday, 12 March 2017, RaisedEvents = [] }) [02] (Background) And employee is manager" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000003" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Sunday, 12 March 2017, aShift: Shift { Id = 2, IsApproved = False, OpeningDate = Sunday, 12 March 2017, RaisedEvents = [] }) [03] Given an unapproved shift" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000051" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Sunday, 12 March 2017, aShift: Shift { Id = 2, IsApproved = False, OpeningDate = Sunday, 12 March 2017, RaisedEvents = [] }) [04] When approving the shift" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000042" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Sunday, 12 March 2017, aShift: Shift { Id = 2, IsApproved = False, OpeningDate = Sunday, 12 March 2017, RaisedEvents = [] }) [05] Then the shift should be approved" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000013" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Sunday, 12 March 2017, aShift: Shift { Id = 2, IsApproved = False, OpeningDate = Sunday, 12 March 2017, RaisedEvents = [] }) [06] And a ShiftApproved event should be raised" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0002948" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Monday, 13 March 2017, aShift: Shift { Id = 3, IsApproved = False, OpeningDate = Monday, 13 March 2017, RaisedEvents = [] }) [01] (Background) Given employee is member of department" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000007" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Monday, 13 March 2017, aShift: Shift { Id = 3, IsApproved = False, OpeningDate = Monday, 13 March 2017, RaisedEvents = [] }) [02] (Background) And employee is manager" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000003" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Monday, 13 March 2017, aShift: Shift { Id = 3, IsApproved = False, OpeningDate = Monday, 13 March 2017, RaisedEvents = [] }) [03] Given an unapproved shift" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000023" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Monday, 13 March 2017, aShift: Shift { Id = 3, IsApproved = False, OpeningDate = Monday, 13 March 2017, RaisedEvents = [] }) [04] When approving the shift" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000019" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Monday, 13 March 2017, aShift: Shift { Id = 3, IsApproved = False, OpeningDate = Monday, 13 March 2017, RaisedEvents = [] }) [05] Then the shift should be approved" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0000011" result="Pass" />
      <test name="Scheduling.Domain.Specs.ShiftFeatures.approving_a_shift(shiftId: 1, date: Monday, 13 March 2017, aShift: Shift { Id = 3, IsApproved = False, OpeningDate = Monday, 13 March 2017, RaisedEvents = [] }) [06] And a ShiftApproved event should be raised" type="Scheduling.Domain.Specs.ShiftFeatures" method="approving_a_shift" time="0.0002091" result="Pass" />
    </collection>
  </assembly>
</assemblies>